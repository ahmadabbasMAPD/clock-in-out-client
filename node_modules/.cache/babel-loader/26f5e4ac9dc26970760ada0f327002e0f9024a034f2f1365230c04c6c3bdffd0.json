{"ast":null,"code":"var _jsxFileName = \"/Users/ahmad/clock-in-out-client/clock-in-out-client/src/AdminDashboard.js\",\n  _s = $RefreshSig$();\n// src/AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport api from './api';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './AdminDashboard.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState(''); // Format \"YYYY-MM\"\n  const [error, setError] = useState('');\n\n  // Fetch all users from the server\n  const fetchAllUsers = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.get('/api/users', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUsers(response.data);\n      setError('');\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch users.');\n    }\n  };\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  // Find the selected user (if any)\n  const selectedUser = users.find(u => u._id === selectedUserId);\n\n  // For the selected user, filter clock entries by the selected month\n  const filteredEntries = selectedUser && selectedUser.clockEntries ? selectedUser.clockEntries.filter(entry => {\n    if (!selectedMonth) return true;\n    const entryYearMonth = new Date(entry.timestamp).toISOString().slice(0, 7);\n    return entryYearMonth === selectedMonth;\n  }) : [];\n\n  // Group entries by day using the timestamp field.\n  const groupEntriesByDay = entries => {\n    const grouped = {};\n    entries.forEach(entry => {\n      const dateKey = new Date(entry.timestamp).toLocaleDateString();\n      if (!grouped[dateKey]) {\n        grouped[dateKey] = [];\n      }\n      grouped[dateKey].push(entry);\n    });\n    return grouped;\n  };\n  const groupedEntries = groupEntriesByDay(filteredEntries);\n\n  // Compute daily hours from a day's entries by pairing clockIn with clockOut.\n  const computeDailyHours = dayEntries => {\n    if (!dayEntries) return 0;\n    const sorted = dayEntries.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const clockIn = sorted.find(e => e.type === 'clockIn');\n    const clockOut = sorted.find(e => e.type === 'clockOut');\n    if (clockIn && clockOut) {\n      return (new Date(clockOut.timestamp) - new Date(clockIn.timestamp)) / (1000 * 60 * 60);\n    }\n    return 0;\n  };\n\n  // Compute weekly total hours for a user (for all entries, or you can adjust to current week)\n  const computeUserWeeklyHours = user => {\n    if (!user.clockEntries) return 0;\n    const grouped = groupEntriesByDay(user.clockEntries);\n    let total = 0;\n    Object.keys(grouped).forEach(day => {\n      total += computeDailyHours(grouped[day]);\n    });\n    return total;\n  };\n\n  // Prepare data for overall chart: each user's weekly total hours\n  const overallData = users.map(user => ({\n    username: user.username,\n    weeklyHours: computeUserWeeklyHours(user)\n  }));\n\n  // Prepare data for detailed chart: selected user's daily hours for the selected month\n  const detailedData = Object.keys(groupedEntries).map(date => ({\n    date,\n    hours: computeDailyHours(groupedEntries[date])\n  })).sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // For the month dropdown, determine the available months for the selected user.\n  const availableMonths = selectedUser && selectedUser.clockEntries ? Array.from(new Set(selectedUser.clockEntries.map(entry => new Date(entry.timestamp).toISOString().slice(0, 7)))).sort() : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userSelect\",\n        children: \"Select User: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"userSelect\",\n        value: selectedUserId,\n        onChange: e => {\n          setSelectedUserId(e.target.value);\n          // Reset month selection when user changes\n          setSelectedMonth('');\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select User--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: user._id,\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), selectedUser && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"monthSelect\",\n          children: \"Select Month: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"monthSelect\",\n          value: selectedMonth,\n          onChange: e => setSelectedMonth(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"--All Months--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), availableMonths.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedUser.username, \"'s Detailed Time Entries\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), detailedData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 300,\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: detailedData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => Number(value).toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"hours\",\n            fill: \"#82ca9d\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No detailed time entries available for the selected month.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this), Object.keys(groupedEntries).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Clock In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Clock Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.keys(groupedEntries).sort((a, b) => new Date(a) - new Date(b)).map(date => {\n            const dayEntries = groupedEntries[date];\n            const dailyHours = computeDailyHours(dayEntries);\n            const clockInTime = dayEntries.find(e => e.type === 'clockIn') ? new Date(dayEntries.find(e => e.type === 'clockIn').timestamp).toLocaleTimeString() : 'N/A';\n            const clockOutTime = dayEntries.find(e => e.type === 'clockOut') ? new Date(dayEntries.find(e => e.type === 'clockOut').timestamp).toLocaleTimeString() : 'N/A';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: clockInTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: clockOutTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dailyHours.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 25\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No time entries available for the selected month.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a user from the dropdown.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weekly Total Hours for All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), overallData.length > 0 ? /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: overallData,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => Number(value).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"weeklyHours\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No user data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"1BfUebqNZddsC6NdAG/ymQC5Lx8=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","api","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminDashboard","_s","users","setUsers","selectedUserId","setSelectedUserId","selectedMonth","setSelectedMonth","error","setError","fetchAllUsers","token","localStorage","getItem","response","get","headers","Authorization","data","err","console","selectedUser","find","u","_id","filteredEntries","clockEntries","filter","entry","entryYearMonth","Date","timestamp","toISOString","slice","groupEntriesByDay","entries","grouped","forEach","dateKey","toLocaleDateString","push","groupedEntries","computeDailyHours","dayEntries","sorted","sort","a","b","clockIn","e","type","clockOut","computeUserWeeklyHours","user","total","Object","keys","day","overallData","map","username","weeklyHours","detailedData","date","hours","availableMonths","Array","from","Set","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","htmlFor","id","value","onChange","target","month","length","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","formatter","Number","toFixed","fill","dailyHours","clockInTime","toLocaleTimeString","clockOutTime","_c","$RefreshReg$"],"sources":["/Users/ahmad/clock-in-out-client/clock-in-out-client/src/AdminDashboard.js"],"sourcesContent":["// src/AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport api from './api';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport './AdminDashboard.css';\n\nconst AdminDashboard = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState(''); // Format \"YYYY-MM\"\n  const [error, setError] = useState('');\n\n  // Fetch all users from the server\n  const fetchAllUsers = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.get('/api/users', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setUsers(response.data);\n      setError('');\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch users.');\n    }\n  };\n\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  // Find the selected user (if any)\n  const selectedUser = users.find(u => u._id === selectedUserId);\n\n  // For the selected user, filter clock entries by the selected month\n  const filteredEntries = selectedUser && selectedUser.clockEntries\n    ? selectedUser.clockEntries.filter(entry => {\n        if (!selectedMonth) return true;\n        const entryYearMonth = new Date(entry.timestamp).toISOString().slice(0, 7);\n        return entryYearMonth === selectedMonth;\n      })\n    : [];\n\n  // Group entries by day using the timestamp field.\n  const groupEntriesByDay = (entries) => {\n    const grouped = {};\n    entries.forEach(entry => {\n      const dateKey = new Date(entry.timestamp).toLocaleDateString();\n      if (!grouped[dateKey]) {\n        grouped[dateKey] = [];\n      }\n      grouped[dateKey].push(entry);\n    });\n    return grouped;\n  };\n\n  const groupedEntries = groupEntriesByDay(filteredEntries);\n\n  // Compute daily hours from a day's entries by pairing clockIn with clockOut.\n  const computeDailyHours = (dayEntries) => {\n    if (!dayEntries) return 0;\n    const sorted = dayEntries.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const clockIn = sorted.find(e => e.type === 'clockIn');\n    const clockOut = sorted.find(e => e.type === 'clockOut');\n    if (clockIn && clockOut) {\n      return (new Date(clockOut.timestamp) - new Date(clockIn.timestamp)) / (1000 * 60 * 60);\n    }\n    return 0;\n  };\n\n  // Compute weekly total hours for a user (for all entries, or you can adjust to current week)\n  const computeUserWeeklyHours = (user) => {\n    if (!user.clockEntries) return 0;\n    const grouped = groupEntriesByDay(user.clockEntries);\n    let total = 0;\n    Object.keys(grouped).forEach(day => {\n      total += computeDailyHours(grouped[day]);\n    });\n    return total;\n  };\n\n  // Prepare data for overall chart: each user's weekly total hours\n  const overallData = users.map(user => ({\n    username: user.username,\n    weeklyHours: computeUserWeeklyHours(user),\n  }));\n\n  // Prepare data for detailed chart: selected user's daily hours for the selected month\n  const detailedData = Object.keys(groupedEntries)\n    .map(date => ({\n      date,\n      hours: computeDailyHours(groupedEntries[date]),\n    }))\n    .sort((a, b) => new Date(a.date) - new Date(b.date));\n\n  // For the month dropdown, determine the available months for the selected user.\n  const availableMonths = selectedUser && selectedUser.clockEntries\n    ? Array.from(\n        new Set(\n          selectedUser.clockEntries.map(entry =>\n            new Date(entry.timestamp).toISOString().slice(0, 7)\n          )\n        )\n      ).sort()\n    : [];\n\n  return (\n    <div className=\"admin-dashboard\">\n      <h1>Admin Dashboard</h1>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      <div className=\"filters\">\n        <label htmlFor=\"userSelect\">Select User: </label>\n        <select\n          id=\"userSelect\"\n          value={selectedUserId}\n          onChange={(e) => {\n            setSelectedUserId(e.target.value);\n            // Reset month selection when user changes\n            setSelectedMonth('');\n          }}\n        >\n          <option value=\"\">--Select User--</option>\n          {users.map(user => (\n            <option key={user._id} value={user._id}>\n              {user.username}\n            </option>\n          ))}\n        </select>\n\n        {selectedUser && (\n          <>\n            <label htmlFor=\"monthSelect\">Select Month: </label>\n            <select\n              id=\"monthSelect\"\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(e.target.value)}\n            >\n              <option value=\"\">--All Months--</option>\n              {availableMonths.map(month => (\n                <option key={month} value={month}>\n                  {month}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n\n      {selectedUser ? (\n        <>\n          <h2>{selectedUser.username}'s Detailed Time Entries</h2>\n          {/* Detailed Chart for Selected User */}\n          {detailedData.length > 0 ? (\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={detailedData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip formatter={(value) => Number(value).toFixed(2)} />\n                <Legend />\n                <Bar dataKey=\"hours\" fill=\"#82ca9d\" />\n              </BarChart>\n            </ResponsiveContainer>\n          ) : (\n            <p>No detailed time entries available for the selected month.</p>\n          )}\n\n          {/* Table View */}\n          {Object.keys(groupedEntries).length > 0 ? (\n            <table className=\"admin-table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Clock In</th>\n                  <th>Clock Out</th>\n                  <th>Hours</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(groupedEntries)\n                  .sort((a, b) => new Date(a) - new Date(b))\n                  .map(date => {\n                    const dayEntries = groupedEntries[date];\n                    const dailyHours = computeDailyHours(dayEntries);\n                    const clockInTime = dayEntries.find(e => e.type === 'clockIn')\n                      ? new Date(dayEntries.find(e => e.type === 'clockIn').timestamp).toLocaleTimeString()\n                      : 'N/A';\n                    const clockOutTime = dayEntries.find(e => e.type === 'clockOut')\n                      ? new Date(dayEntries.find(e => e.type === 'clockOut').timestamp).toLocaleTimeString()\n                      : 'N/A';\n                    return (\n                      <tr key={date}>\n                        <td>{date}</td>\n                        <td>{clockInTime}</td>\n                        <td>{clockOutTime}</td>\n                        <td>{dailyHours.toFixed(2)}</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          ) : (\n            <p>No time entries available for the selected month.</p>\n          )}\n        </>\n      ) : (\n        <p>Please select a user from the dropdown.</p>\n      )}\n\n      {/* Overall Chart: Weekly total hours for all users */}\n      <h2>Weekly Total Hours for All Users</h2>\n      {overallData.length > 0 ? (\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={overallData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"username\" />\n            <YAxis />\n            <Tooltip formatter={(value) => Number(value).toFixed(2)} />\n            <Legend />\n            <Bar dataKey=\"weeklyHours\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n      ) : (\n        <p>No user data available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}