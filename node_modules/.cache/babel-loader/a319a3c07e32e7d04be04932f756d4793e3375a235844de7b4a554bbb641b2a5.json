{"ast":null,"code":"var _jsxFileName = \"/Users/ahmad/clock-in-out-client/clock-in-out-client/src/AdminDashboard.js\",\n  _s = $RefreshSig$();\n// src/AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminDashboard.css';\nimport api from './api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState(''); // Format \"YYYY-MM\"\n  const [error, setError] = useState('');\n\n  // Fetch all users from the server\n  const fetchAllUsers = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.get('/api/users', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUsers(response.data);\n      setError('');\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch users.');\n    }\n  };\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  // Find the selected user\n  const selectedUser = users.find(u => u._id === selectedUserId);\n\n  // Filter clock entries by the selected month (if selected).\n  const filteredEntries = selectedUser && selectedUser.clockEntries ? selectedUser.clockEntries.filter(entry => {\n    if (!selectedMonth) return true;\n    // Extract year and month from the timestamp (YYYY-MM)\n    const entryYearMonth = new Date(entry.timestamp).toISOString().slice(0, 7);\n    return entryYearMonth === selectedMonth;\n  }) : [];\n\n  // Group entries by day using the timestamp field.\n  const groupEntriesByDay = entries => {\n    const grouped = {};\n    entries.forEach(entry => {\n      const dateKey = new Date(entry.timestamp).toLocaleDateString();\n      if (!grouped[dateKey]) {\n        grouped[dateKey] = [];\n      }\n      grouped[dateKey].push(entry);\n    });\n    return grouped;\n  };\n  const groupedEntries = groupEntriesByDay(filteredEntries);\n\n  // Compute daily hours from a day's entries by pairing clockIn with clockOut.\n  const computeDailyHours = dayEntries => {\n    if (!dayEntries) return 0;\n    const sorted = dayEntries.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const clockIn = sorted.find(e => e.type === 'clockIn');\n    const clockOut = sorted.find(e => e.type === 'clockOut');\n    if (clockIn && clockOut) {\n      return (new Date(clockOut.timestamp) - new Date(clockIn.timestamp)) / (1000 * 60 * 60);\n    }\n    return 0;\n  };\n\n  // Helper: Format time into a readable string (time only)\n  const formatTime = dateInput => {\n    const date = new Date(dateInput);\n    if (isNaN(date.getTime())) return 'Invalid date';\n    return date.toLocaleTimeString(); // Only displays the time portion\n  };\n\n  // For the month dropdown, determine the available months (in \"YYYY-MM\") for the selected user.\n  const availableMonths = selectedUser && selectedUser.clockEntries ? Array.from(new Set(selectedUser.clockEntries.map(entry => new Date(entry.timestamp).toISOString().slice(0, 7)))).sort() : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userSelect\",\n        children: \"Select User: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"userSelect\",\n        value: selectedUserId,\n        onChange: e => {\n          setSelectedUserId(e.target.value);\n          // Reset month selection when user changes\n          setSelectedMonth('');\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select User--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: user._id,\n          children: user.username\n        }, user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), selectedUser && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"monthSelect\",\n          children: \"Select Month: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"monthSelect\",\n          value: selectedMonth,\n          onChange: e => setSelectedMonth(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"--All Months--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), availableMonths.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), selectedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedUser.username, \"'s Time Entries\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), Object.keys(groupedEntries).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"admin-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Clock In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Clock Out\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Hours\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.keys(groupedEntries).sort((a, b) => new Date(a) - new Date(b)).map(date => {\n            const dayEntries = groupedEntries[date];\n            const dailyHours = computeDailyHours(dayEntries);\n            const clockInTime = dayEntries.find(e => e.type === 'clockIn') ? formatTime(dayEntries.find(e => e.type === 'clockIn').timestamp) : 'N/A';\n            const clockOutTime = dayEntries.find(e => e.type === 'clockOut') ? formatTime(dayEntries.find(e => e.type === 'clockOut').timestamp) : 'N/A';\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: clockInTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: clockOutTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: dailyHours.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 25\n              }, this)]\n            }, date, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No time entries available for the selected month.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please select a user from the dropdown.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminDashboard, \"1BfUebqNZddsC6NdAG/ymQC5Lx8=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","api","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminDashboard","_s","users","setUsers","selectedUserId","setSelectedUserId","selectedMonth","setSelectedMonth","error","setError","fetchAllUsers","token","localStorage","getItem","response","get","headers","Authorization","data","err","console","selectedUser","find","u","_id","filteredEntries","clockEntries","filter","entry","entryYearMonth","Date","timestamp","toISOString","slice","groupEntriesByDay","entries","grouped","forEach","dateKey","toLocaleDateString","push","groupedEntries","computeDailyHours","dayEntries","sorted","sort","a","b","clockIn","e","type","clockOut","formatTime","dateInput","date","isNaN","getTime","toLocaleTimeString","availableMonths","Array","from","Set","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","htmlFor","id","value","onChange","target","user","username","month","Object","keys","length","dailyHours","clockInTime","clockOutTime","toFixed","_c","$RefreshReg$"],"sources":["/Users/ahmad/clock-in-out-client/clock-in-out-client/src/AdminDashboard.js"],"sourcesContent":["// src/AdminDashboard.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './AdminDashboard.css';\nimport api from './api';\n\n\nconst AdminDashboard = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [selectedMonth, setSelectedMonth] = useState(''); // Format \"YYYY-MM\"\n  const [error, setError] = useState('');\n\n  // Fetch all users from the server\n  const fetchAllUsers = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await api.get('/api/users', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setUsers(response.data);\n      setError('');\n    } catch (err) {\n      console.error(err);\n      setError('Failed to fetch users.');\n    }\n  };\n  \n\n  useEffect(() => {\n    fetchAllUsers();\n  }, []);\n\n  // Find the selected user\n  const selectedUser = users.find(u => u._id === selectedUserId);\n\n  // Filter clock entries by the selected month (if selected).\n  const filteredEntries = selectedUser && selectedUser.clockEntries\n    ? selectedUser.clockEntries.filter(entry => {\n        if (!selectedMonth) return true;\n        // Extract year and month from the timestamp (YYYY-MM)\n        const entryYearMonth = new Date(entry.timestamp).toISOString().slice(0, 7);\n        return entryYearMonth === selectedMonth;\n      })\n    : [];\n\n  // Group entries by day using the timestamp field.\n  const groupEntriesByDay = (entries) => {\n    const grouped = {};\n    entries.forEach(entry => {\n      const dateKey = new Date(entry.timestamp).toLocaleDateString();\n      if (!grouped[dateKey]) {\n        grouped[dateKey] = [];\n      }\n      grouped[dateKey].push(entry);\n    });\n    return grouped;\n  };\n\n  const groupedEntries = groupEntriesByDay(filteredEntries);\n\n  // Compute daily hours from a day's entries by pairing clockIn with clockOut.\n  const computeDailyHours = (dayEntries) => {\n    if (!dayEntries) return 0;\n    const sorted = dayEntries.slice().sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n    const clockIn = sorted.find(e => e.type === 'clockIn');\n    const clockOut = sorted.find(e => e.type === 'clockOut');\n    if (clockIn && clockOut) {\n      return (new Date(clockOut.timestamp) - new Date(clockIn.timestamp)) / (1000 * 60 * 60);\n    }\n    return 0;\n  };\n\n  // Helper: Format time into a readable string (time only)\n  const formatTime = (dateInput) => {\n    const date = new Date(dateInput);\n    if (isNaN(date.getTime())) return 'Invalid date';\n    return date.toLocaleTimeString(); // Only displays the time portion\n  };\n\n  // For the month dropdown, determine the available months (in \"YYYY-MM\") for the selected user.\n  const availableMonths = selectedUser && selectedUser.clockEntries\n    ? Array.from(\n        new Set(\n          selectedUser.clockEntries.map(entry =>\n            new Date(entry.timestamp).toISOString().slice(0, 7)\n          )\n        )\n      ).sort()\n    : [];\n\n  return (\n    <div className=\"admin-dashboard\">\n      <h1>Admin Dashboard</h1>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      <div className=\"filters\">\n        <label htmlFor=\"userSelect\">Select User: </label>\n        <select\n          id=\"userSelect\"\n          value={selectedUserId}\n          onChange={(e) => {\n            setSelectedUserId(e.target.value);\n            // Reset month selection when user changes\n            setSelectedMonth('');\n          }}\n        >\n          <option value=\"\">--Select User--</option>\n          {users.map(user => (\n            <option key={user._id} value={user._id}>\n              {user.username}\n            </option>\n          ))}\n        </select>\n\n        {selectedUser && (\n          <>\n            <label htmlFor=\"monthSelect\">Select Month: </label>\n            <select\n              id=\"monthSelect\"\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(e.target.value)}\n            >\n              <option value=\"\">--All Months--</option>\n              {availableMonths.map(month => (\n                <option key={month} value={month}>\n                  {month}\n                </option>\n              ))}\n            </select>\n          </>\n        )}\n      </div>\n\n      {selectedUser ? (\n        <>\n          <h2>{selectedUser.username}'s Time Entries</h2>\n          {Object.keys(groupedEntries).length > 0 ? (\n            <table className=\"admin-table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Clock In</th>\n                  <th>Clock Out</th>\n                  <th>Hours</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(groupedEntries)\n                  .sort((a, b) => new Date(a) - new Date(b))\n                  .map(date => {\n                    const dayEntries = groupedEntries[date];\n                    const dailyHours = computeDailyHours(dayEntries);\n                    const clockInTime = dayEntries.find(e => e.type === 'clockIn')\n                      ? formatTime(dayEntries.find(e => e.type === 'clockIn').timestamp)\n                      : 'N/A';\n                    const clockOutTime = dayEntries.find(e => e.type === 'clockOut')\n                      ? formatTime(dayEntries.find(e => e.type === 'clockOut').timestamp)\n                      : 'N/A';\n                    return (\n                      <tr key={date}>\n                        <td>{date}</td>\n                        <td>{clockInTime}</td>\n                        <td>{clockOutTime}</td>\n                        <td>{dailyHours.toFixed(2)}</td>\n                      </tr>\n                    );\n                  })}\n              </tbody>\n            </table>\n          ) : (\n            <p>No time entries available for the selected month.</p>\n          )}\n        </>\n      ) : (\n        <p>Please select a user from the dropdown.</p>\n      )}\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}